OpenStack Ansible Deployment
############################
:date: 2015-02-02 22:00
:tags: lxc, openstack, cloud, ansible
:category: \*nix


Playbooks
---------

There are several playbooks within that will setup hosts for use in OpenStack Cloud. The playbooks will enable LXC on hosts and provides the ability to deploy LXC containers for use within openstack.

Plays:
  * ``setup-hosts.yml``  Performs host setup for use with LXC in the OpenStack hosts.
  * ``setup-infrastructure.yml`` Performs all of the setup for all infrastructure components.
  * ``setup-openstack.yml`` Performs all of the setup for all of the OpenStack components.

* If you dont want to run plays individually you can simply run ``setup-everything.yml`` which will perform all of the setup and installation for you.

Basic Setup:
  1. If you have any roles that you'd like to have pulled in that are outside the scope and or replace modules within this repository please add them to the ``ansible-role-requirements.yml`` file. In this file you will want to fill in the details for the role you want to pull in using standard ansible galaxy format.

  .. code-block:: yaml

    - name: SuperAwesomeModule
      src: https://github.com/super-user/SuperAwesomeModule
      version: master

  2. Run the ``./scripts/bootstrap-ansible.sh`` script, which will install, pip, ansible 1.9.x, all of the required python packages, and bring in any third part ansible roles that you may want to add to the deployment.
  3. Copy the ``etc/openstack_deploy`` directory to ``/etc/openstack_deploy``.
  4. Fill in your ``openstack_deploy/openstack_user_config.yml``, ``openstack_deploy/user_secrets.yml`` and ``openstack_deploy/user_variables.yml`` files which you've just copied to your ``/etc/`` directory.
  5. Generate all of your random passwords executing ``scripts/pw-token-gen.py --file /etc/openstack_deploy/user_secrets.yml``.
  6. Accomplish all of the host networking that you want to use within the deployment. See the ``etc/network`` directory in this repository for an example network setup.
  7. When ready change to the ``playbooks/`` directory and execute your desired plays.  IE:

  .. code-block:: bash

    openstack-ansible setup-everything.yml


Notes
-----

* If you run the ``./scripts/bootstrap-ansible.sh`` script a wrapper script will be added to your system that wraps the ansible-playbook command to simplify the arguments required to run openstack ansible plays. The name of the wrapper script is **openstack-ansible**.
* The lxc network is created within the *lxcbr0* interface. This supports both NAT networks as well as more traditional networking. If NAT is enabled (default) the IPtables rules will be created along with the interface as a post-up processes. If you ever need to recreate the rules and or restart the dnsmask process you can bounce the interface IE: ``ifdown lxcb0; ifup lxcbr0`` or you can use the ``lxc-system-manage`` command.
* The tool ``lxc-system-manage`` is available on all lxc hosts and can assist in recreating parts of the LXC system whenever its needed.
* Inventory is generated by executing the ``playbooks/inventory/dynamic_inventory.py`` script. This is configured in the ``playbooks/ansible.cfg`` file.


Bugs and Blueprints
-------------------

Everything we do is in launchpad and gerrit. If you'd like to raise a bug, feature request, or are looking for ways to contribute please go to "https://launchpad.net/openstack-ansible".


Documentation
-------------

While no os-ansible-deployment community documentation exists (yet), other than the .rst files present in this repository, comprehensive installation guides for Rackspace Private Cloud (an opinionated version of os-ansible-deployment) are available at "http://www.rackspace.com/knowledge_center/getting-started/rackspace-private-cloud".

Note:
  These docs may not be up-to-date with the current release of this repository however they are still a good source of documentation.
